#**INITIAL STEPS**

#**Community diversity and composition at the 3% Clustering level of the Collembola order**

#####In excel remove the simbol ## from the names of the table and rename the samples acccording to the code used in the gradient e.g. GRA_S10_D_F_A10
library(stats)
library(base)
library(dplyr)
library(tidyr)
library(knitr)
library(PMCMR)
library(rcdd) 
library(vegan)
library(betapart) 
library(stringr)
library(permute)
library(lattice)

#**TABLES AND COMMUNITY MATRIXES**
#####open table with names including Region and habitat parameters
s2_raw_all <- read.table("../../genetic/Data_in/Collembola/s2_raw_all_Collembola_threshold.txt", header=TRUE)
dim(s2_raw_all)

#####remove additional columns and leave only names (of haplotipes), samples and taxa (and threshold in this case)
s2_raw_all[,c(1:40,42)]->s2_raw
dim(s2_raw) ##49 samples = 48 plus 1 neg (the second neg from DOM_REPS is not there because all 0)
colnames(s2_raw)

#####Applying the conservative threshold (this is a binary column)
s2_raw[which(s2_raw$conservative_threshold == "1"),]->s2_raw_threshold 
s2_raw_threshold [,1:40]->s2_raw_threshold ##remove threshold col
dim(s2_raw_threshold)
colnames(s2_raw_threshold)

#####loop to create the new matrix combining haplotype by otu pertenency, i.e. submatrix by limit
#**Collembola**
unique (s2_raw_threshold$limite0.03)->levels_limite0.03

data.frame()->s2_raw_Collembola_limite0.03

for (i in 1:length(unique (s2_raw_threshold$limite0.03)))
{
  levels_limite0.03[i]->level0.03
  s2_raw_threshold[which(s2_raw_threshold$limite0.03==level0.03),]->subcom_level_names0.03
  subcom_level_names0.03[,c(2:26)]->subcom_level0.03  #delete names, level and also the negative column
  colSums(subcom_level0.03)->sum0.03
  as.data.frame(sum0.03)->sum0.03
  t(sum0.03)->sum0.03
  row.names(sum0.03)<-subcom_level_names0.03[1,1] #keep the name of the first haplotype
  rbind(s2_raw_Collembola_limite0.03,sum0.03)->s2_raw_Collembola_limite0.03
}

##**transform in present/absence table**
s2_raw_Collembola_limite0.03->s2_raw_Collembola_limite0.03
s2_raw_Collembola_limite0.03[s2_raw_Collembola_limite0.03>1]<-1 ##transform in present/absence table 

##**checking if there is any row with no presence**
s2_raw_Collembola_limite0.03[,1:25]->data0.03
rowSums(data0.03)
length(which(rowSums(data0.03)!=0))
length(which(rowSums(data0.03)==0))

##**Community matrixes (samples in rows and h in cols).**
##**Collembola**
t(s2_raw_Collembola_limite0.03)->t_s2_f4_Collembola_limite0.03 ##trasp
t_s2_f4_Collembola_limite0.03[1:25,]->community_Collembola_limite0.03 #NOTA_Nancy: Este numero es importante. Colocar exactamente el numero de "s2_f4[,2:52]->data0.03".
colnames(t_s2_f4_Collembola_limite0.03)<-community_Collembola_limite0.03[1,] 
as.data.frame(community_Collembola_limite0.03)->community_Collembola0.03 ##trasp including col and row names
####community_Acari[-49,]->community_Collembola ##removing neg
dim(community_Collembola0.03)
community_Collembola0.03[order(row.names(community_Collembola0.03)),]->community_Collembola0.03 ##order samples
write.table (community_Collembola0.03, file="../../genetic/Data_out/Collembola/Collembola3P/community_Collembola0.03.txt") ##this is necessary for the format, not able to solve in other way
read.table ("../../genetic/Data_out/Collembola/Collembola3P/community_Collembola0.03.txt")->community_Collembola0.03


##**submatrixes by Traps in Nevado Toluca**
dim(community_Collembola0.03)
community_Collembola0.03[which(str_extract (row.names(community_Collembola0.03), "_T_") %in% "_T_"),]->community_Collembola_Traps0.03
dim(community_Collembola_Traps0.03)
community_Collembola_Traps0.03[,which(colSums(community_Collembola_Traps0.03)!=0)]->community_Collembola_Traps0.03 ##to remove no data colums
dim(community_Collembola_Traps0.03)
write.table (community_Collembola_Traps0.03, file="../../genetic/Data_out/Collembola/Collembola3P/community_Collembola_Traps0.03.txt") ##this is necessary for the format, not able to solve in other way
read.table ("../../genetic/Data_out/Collembola/Collembola3P/community_Collembola_Traps0.03.txt")->community_Collembola_Traps0.03


##**Generating a general table with names and habitat parameters.**
##BY Traps
##**Generating a general table with names and habitat parameters**
row.names(community_Collembola_Traps0.03)->sample_names_Mountain1_0.03
as.data.frame(sample_names_Mountain1_0.03)->sample_names_Mountain1_0.03
sample_names_Mountain1_0.03 %>% separate(sample_names_Mountain1_0.03, c("Conservation1","Mountain1","Traps","ID"), sep="_",remove=FALSE)->general_sample_Mountain1Traps0.03
general_sample_Mountain1Traps0.03
general_sample_Mountain1Traps0.03 %>% unite(Mountain1andTraps, Mountain1,Traps, sep="_",remove=FALSE)->general_sample_Mountain1Traps0.03 ####generating a variable combining layer and habitat
general_sample_Mountain1Traps0.03
write.table(general_sample_Mountain1Traps0.03, file="../../genetic/Data_out/Collembola/Collembola3P/general_sample_Mountain1Traps0.03.txt") ##this is the only way I found to be able to work later
read.table("../../genetic/Data_out/Collembola/Collembola3P/general_sample_Mountain1Traps0.03.txt",header=TRUE)->general_sample_Mountain1Traps0.03



#**HAPLOTYPE RICHNESS TABLES, PLOTS AND ANALYSES by TrapsS**
##**Collembola**
as.matrix(community_Collembola_Traps0.03)->community_Collembola_Traps0.03
row.names(community_Collembola_Traps0.03)->sample_names_Traps0.03
dim(community_Collembola_Traps0.03)->dims_Traps0.03
dims_Traps0.03
.rowSums (community_Collembola_Traps0.03,dims_Traps0.03[1],dims_Traps0.03[2])->sample_richness_Traps0.03 ##summatory by rows
rbind(sample_names_Traps0.03,sample_richness_Traps0.03)->richness_Traps0.03
t(richness_Traps0.03)->richness_Traps0.03
colnames(richness_Traps0.03)<-c("sample_names_Traps0.03","sample_richness_Traps0.03")
richness_Traps0.03
as.data.frame(richness_Traps0.03)->richness_Traps0.03

##**Generating variables with Traps. En la tabla rishnees. Generar variable de montana y sitio.** 
richness_Traps0.03 %>% separate(sample_names_Traps0.03, c("Conservation1","Mountain1","Traps","ID"), sep="_",remove=FALSE)->richness_Traps0.03
richness_Traps0.03
richness_Traps0.03 %>% unite(Mountain1Traps, Mountain1, Traps, sep="_",remove=FALSE)->richness_Traps0.03 ##generating a variable combining layer and habitat
richness_Traps0.03

##**Generating variables with in total Traps_C.**
#richness_Traps0.03 %>% separate(sample_names_Traps0.03, c("Conservation","Mountain1","Traps","ID"), sep="_",remove=FALSE)->richness_TrapsC
#richness_TrapsC
#richness_TrapsC %>% unite(ConservationMountain1, Conservation, Mountain1, sep="_",remove=FALSE)->richness_TrapsC ##generating a variable combining layer and habitat
#richness_TrapsC

##**BY Traps**
write.table(richness_Traps0.03, file="../../genetic/Data_out/Collembola/Collembola3P/richness_Traps0.03_Collembola.txt") ##this is the only way I found to be able to work later
read.table("../../genetic/Data_out/Collembola/Collembola3P/richness_Traps0.03_Collembola.txt",header=TRUE)->richness_Traps0.03_Collembola

##**BY Traps_C general**
#write.table(richness_TrapsC, file="../../genetic/Data_out/Collembola/Collembola3P/richness_TrapsC_Collembola.txt") ##this is the only way I found to be able to work later
#read.table("../../genetic/Data_out/Collembola/Collembola3P/richness_TrapsC_Collembola.txt",header=TRUE)->richness_TrapsC

##**General plot of richness by sample in Traps**
barplot(richness_Traps0.03$sample_richness_Traps0.03,col=richness_Traps0.03$Mountain1Traps,names.arg= richness_Traps0.03$sample_names_Traps0.03,las=2,cex.names=0.5, ylab="richness_Traps0.03", main="H richness_Traps Collembola_0.03")
richness_Traps0.03 %>% group_by(Mountain1Traps) %>% summarise(mean(sample_richness_Traps0.03))

##**min, max, ds Summarise**
richness_Traps0.03 %>% group_by(Mountain1Traps) %>% summarise(min(sample_richness_Traps0.03))
richness_Traps0.03 %>% group_by(Mountain1Traps) %>% summarise(max(sample_richness_Traps0.03))
richness_Traps0.03 %>% group_by(Mountain1Traps) %>% summarise(sd(sample_richness_Traps0.03))

##**General mean, min, max, ds by sample in Traps_richness_TrapsC**
#richness_TrapsC %>% group_by(ConservationMountain1) %>% summarise(mean(sample_richness_Traps0.03))
#richness_TrapsC %>% group_by(ConservationMountain1) %>% summarise(min(sample_richness_Traps0.03))
#richness_TrapsC %>% group_by(ConservationMountain1) %>% summarise(max(sample_richness_Traps0.03))
#richness_TrapsC %>% group_by(ConservationMountain1) %>% summarise(sd(sample_richness_Traps0.03))

##**Global richness by Traps.**  
plot(richness_Traps0.03$Mountain1Traps,richness_Traps0.03$sample_richness_Traps0.03,ylab="richness_Traps0.03", ylim=c(0,15), cex=1.4, cex.axis=2.3, lwd=2.5)
kruskal.test(sample_richness_Traps0.03 ~ Mountain1Traps, data = richness_Traps0.03)
#posthoc.kruskal.nemenyi.test(x=richness_Traps0.03$sample_richness_Traps0.03, g=richness_Traps0.03$Mountain1Traps, method="Bonferroni")
PMCMRplus::kwAllPairsConoverTest(x=richness_Traps0.03$sample_richness_Traps0.03, g=richness_Traps0.03$Mountain1Traps, p.adjust.method = "single-step")
##Comparison of each group against. 
#text(x=c(1,2,3,4.1), y=(49), labels=c("ab","a","ab","b"), cex=1.4)
#text(x=c(1,2,3,4), y=(2), labels=c("ab","a","ab","b"), cex=1.5)
text(x=3.3, y=0.5, labels="ns", cex=2)
mtext(c("lineages 3%"), side = 3, col = "black", line = 1, cex = 2)



#**BETADIVERSITY ORDINATIONS by Trapss** 
#**Collembola**
##beta general

beta.multi(community_Collembola_Traps0.03, index.family="sorensen")

##turnover by pairs, nmds, anosim
beta.pair(community_Collembola_Traps0.03, index.family="sorensen")->beta.pair  ##betadiversity by pair of communities using sorensen on the precense/absence data, with estimation of turnover and nestedness datamatrixes simultaneously
metaMDS (beta.pair$beta.sim)->MDSbetasim_T0.03 ##NMDS

plot (MDSbetasim_T0.03, main="Collembola_Traps_0.03") 
x<- MDSbetasim_T0.03$points[,1]
y<- MDSbetasim_T0.03$points[,2]
text(x, y, pos = 1, cex=0.7, labels = row.names (community_Collembola_Traps0.03))

plot (MDSbetasim_T0.03, main="Collembola_Traps_0.03")
with(general_sample_Mountain1Traps0.03,ordispider(MDSbetasim_T0.03, Traps, label=T, col="blue"))

plot (MDSbetasim_T0.03, xlim=c(-0.4, 0.4), ylim=c(-0.4, 0.4), cex.axis=1.4, cex=1.2, cex.lab=1.4, main="Collembola_Traps_0.03")
with(general_sample_Mountain1Traps0.03,ordispider(MDSbetasim_T0.03, Traps, label=T, cex.lab=0.9, col= c("#153a7b", "#eaa22f", "#97518b", "#81b9d0")))

##**Anosim**
anosim(beta.pair$beta.sim, general_sample_Mountain1Traps0.03$Traps, permutations=999)

plot (MDSbetasim_T0.03, xlim=c(-0.4, 0.4), ylim=c(-0.4, 0.4), cex=2, cex.lab=1, cex.axis=2.3, lwd=4.5)
with(general_sample_Mountain1Traps0.03,ordispider(MDSbetasim_T0.03, Traps, label=T, cex.lab=1, col= c("#153a7b", "#eaa22f", "#97518b", "#81b9d0"), lwd=4.5))
##I put letter "r" in cursive and r2 value
mylabel = bquote(italic(r)^2)
text(x=0.16, y=-0.35, labels = mylabel, cex=2)
text(x=0.41, y=-0.35, labels="=0.04 ns", cex=2)
mtext(c("lineages 3%"), side = 3, col = "black", line = 1, cex = 2)


#**END TRAPS**


###################################
##**submatrixes by Groups in Nevado Toluca**
dim(community_Collembola0.03)
community_Collembola0.03[which(str_extract (row.names(community_Collembola0.03), "G_") %in% "G_"),]->community_Collembola_Groups0.03
dim(community_Collembola_Groups0.03)
community_Collembola_Groups0.03[,which(colSums(community_Collembola_Groups0.03)!=0)]->community_Collembola_Groups0.03 ##to remove no data colums
dim(community_Collembola_Groups0.03)
write.table (community_Collembola_Groups0.03, file="../../genetic/Data_out/Collembola/Collembola3P/community_Collembola_Groups0.03.txt") ##this is necessary for the format, not able to solve in other way
read.table ("../../genetic/Data_out/Collembola/Collembola3P/community_Collembola_Groups0.03.txt")->community_Collembola_Groups0.03


##**Generating a general table with names and habitat parameters.**
##BY Groups
##**Generating a general table with names and habitat parameters**
row.names(community_Collembola_Groups0.03)->sample_names_Mountain2_0.03
as.data.frame(sample_names_Mountain2_0.03)->sample_names_Mountain2_0.03
sample_names_Mountain2_0.03 %>% separate(sample_names_Mountain2_0.03, c("Conservation2","Mountain2","Groups","ID"), sep="_",remove=FALSE)->general_sample_Mountain2Groups0.03
general_sample_Mountain2Groups0.03
general_sample_Mountain2Groups0.03 %>% unite(Mountain2andGroups, Mountain2,Groups, sep="_",remove=FALSE)->general_sample_Mountain2Groups0.03 ####generating a variable combining layer and habitat
general_sample_Mountain2Groups0.03
write.table(general_sample_Mountain2Groups0.03, file="../../genetic/Data_out/Collembola/Collembola3P/general_sample_Mountain2Groups0.03.txt") ##this is the only way I found to be able to work later
read.table("../../genetic/Data_out/Collembola/Collembola3P/general_sample_Mountain2Groups0.03.txt",header=TRUE)->general_sample_Mountain2Groups0.03



#**HAPLOTYPE RICHNESS TABLES, PLOTS AND ANALYSES by GroupsS**
##**Collembola**
as.matrix(community_Collembola_Groups0.03)->community_Collembola_Groups0.03
row.names(community_Collembola_Groups0.03)->sample_names_Groups0.03
dim(community_Collembola_Groups0.03)->dims_Groups0.03
dims_Groups0.03
.rowSums (community_Collembola_Groups0.03,dims_Groups0.03[1],dims_Groups0.03[2])->sample_richness_Groups0.03 ##summatory by rows
rbind(sample_names_Groups0.03,sample_richness_Groups0.03)->richness_Groups0.03
t(richness_Groups0.03)->richness_Groups0.03
colnames(richness_Groups0.03)<-c("sample_names_Groups0.03","sample_richness_Groups0.03")
richness_Groups0.03
as.data.frame(richness_Groups0.03)->richness_Groups0.03

##**Generating variables with Groups. En la tabla rishnees. Generar variable de montana y sitio.** 
richness_Groups0.03 %>% separate(sample_names_Groups0.03, c("Conservation2","Mountain2","Groups","ID"), sep="_",remove=FALSE)->richness_Groups0.03
richness_Groups0.03
richness_Groups0.03 %>% unite(Mountain2Groups, Mountain2, Groups, sep="_",remove=FALSE)->richness_Groups0.03 ##generating a variable combining layer and habitat
richness_Groups0.03

##**Generating variables with in total Groups_C.**
#richness_Groups0.03 %>% separate(sample_names_Groups0.03, c("Conservation","Mountain1","Groups","ID"), sep="_",remove=FALSE)->richness_GroupsC
#richness_GroupsC
#richness_GroupsC %>% unite(ConservationMountain1, Conservation, Mountain1, sep="_",remove=FALSE)->richness_GroupsC ##generating a variable combining layer and habitat
#richness_GroupsC

##**BY Groups**
write.table(richness_Groups0.03, file="../../genetic/Data_out/Collembola/Collembola3P/richness_Groups0.03_Collembola.txt") ##this is the only way I found to be able to work later
read.table("../../genetic/Data_out/Collembola/Collembola3P/richness_Groups0.03_Collembola.txt",header=TRUE)->richness_Groups0.03_Collembola

##**BY Groups_C general**
#write.table(richness_GroupsC, file="../../genetic/Data_out/Collembola/Collembola3P/richness_GroupsC_Collembola.txt") ##this is the only way I found to be able to work later
#read.table("../../genetic/Data_out/Collembola/Collembola3P/richness_GroupsC_Collembola.txt",header=TRUE)->richness_GroupsC

##**General plot of richness by sample in Groups**
barplot(richness_Groups0.03$sample_richness_Groups0.03,col=richness_Groups0.03$Mountain2Groups,names.arg= richness_Groups0.03$sample_names_Groups0.03,las=2,cex.names=0.5, ylab="richness_Groups0.03", main="H richness_Groups Collembola_0.03")
richness_Groups0.03 %>% group_by(Mountain2Groups) %>% summarise(mean(sample_richness_Groups0.03))

##**min, max, ds Summarise**
richness_Groups0.03 %>% group_by(Mountain2Groups) %>% summarise(min(sample_richness_Groups0.03))
richness_Groups0.03 %>% group_by(Mountain2Groups) %>% summarise(max(sample_richness_Groups0.03))
richness_Groups0.03 %>% group_by(Mountain2Groups) %>% summarise(sd(sample_richness_Groups0.03))

##**General mean, min, max, ds by sample in Groups_richness_GroupsC**
#richness_GroupsC %>% group_by(ConservationMountain1) %>% summarise(mean(sample_richness_Groups0.03))
#richness_GroupsC %>% group_by(ConservationMountain1) %>% summarise(min(sample_richness_Groups0.03))
#richness_GroupsC %>% group_by(ConservationMountain1) %>% summarise(max(sample_richness_Groups0.03))
#richness_GroupsC %>% group_by(ConservationMountain1) %>% summarise(sd(sample_richness_Groups0.03))


##**Global richness by Groups.**  
plot(richness_Groups0.03$Mountain2Groups,richness_Groups0.03$sample_richness_Groups0.03,ylab="richness_Groups_0.03_Collembola", cex=1.4, cex.axis=2.3, lwd=2.5, ylim=c(0,10))
kruskal.test(sample_richness_Groups0.03 ~ Mountain2Groups, data = richness_Groups0.03)
#PMCMRplus::kwAllPairsNemenyiTest(x=richness_Groups_h_Collembola$sample_richness_Groups_h, g=richness_Groups_h_Collembola$Mountain2Groups, p.adjust.method = "single-step")
PMCMRplus::kwAllPairsConoverTest(x=richness_Groups0.03$sample_richness_Groups0.03, g=richness_Groups0.03$Mountain2Groups, p.adjust.method = "single-step")
#PMCMRplus::kwAllPairsDunnTest(x=richness_Groups_h_Collembola$sample_richness_Groups_h, g=richness_Groups_h_Collembola$Mountain2Groups, p.adjust.method="bonferroni")
#kwAllPairsNemenyiTest(x=richness_Groups_h_Collembola$sample_richness_Groups_h, g=richness_Groups_h_Collembola$Mountain2Groups)
##Comparison of each group against. 
#text(x=c(1,2,3,4,5), y=1.4, labels=c("ab","ab","ab","a","b"), cex=1.5)
text(x=5.5, y=1.4, labels="ns", cex=2)
mtext(c("lineages 3%"), side = 3, col = "black", line = 1, cex = 2)

#**BETADIVERSITY ORDINATIONS by Groupss** 
#**Collembola**
##beta general

beta.multi(community_Collembola_Groups0.03, index.family="sorensen")

##turnover by pairs, nmds, anosim
beta.pair(community_Collembola_Groups0.03, index.family="sorensen")->beta.pair  ##betadiversity by pair of communities using sorensen on the precense/absence data, with estimation of turnover and nestedness datamatrixes simultaneously
metaMDS (beta.pair$beta.sim)->MDSbetasim_G0.03 ##NMDS

plot (MDSbetasim_G0.03, main="Collembola_Groups_0.03") 
x<- MDSbetasim_G0.03$points[,1]
y<- MDSbetasim_G0.03$points[,2]
text(x, y, pos = 1, cex=0.7, labels = row.names (community_Collembola_Groups0.03))

plot (MDSbetasim_G0.03, main="Collembola_Groups_0.03")
with(general_sample_Mountain2Groups0.03,ordispider(MDSbetasim_G0.03, Mountain2, label=T, col="blue"))

plot (MDSbetasim_G0.03, xlim=c(-0.5, 0.5), ylim=c(-0.4, 0.4), cex.axis=1.4, cex=1.2, cex.lab=1.4, main="Collembola_Groups_0.03")
with(general_sample_Mountain2Groups0.03,ordispider(MDSbetasim_G0.03, Mountain2, label=T, cex.lab=0.9, col= c("#153a7b", "#eaa22f", "#97518b", "#81b9d0", "#c1d6b1")))

##**Anosim**
anosim(beta.pair$beta.sim, general_sample_Mountain2Groups0.03$Mountain2, permutations=999)

plot (MDSbetasim_G0.03, xlim=c(-0.4, 0.4), ylim=c(-0.4, 0.4), cex=2, cex.lab=1, cex.axis=2.3, lwd=4.5)
with(general_sample_Mountain2Groups0.03,ordispider(MDSbetasim_G0.03, Mountain2, label=T, cex.lab=1, col= c("#153a7b", "#eaa22f", "#97518b", "#81b9d0", "#c1d6b1"), lwd=4.5))
##I put letter "r" in cursive and r2 value
mylabel = bquote(italic(r)^2)
text(x=0.25, y=-0.37, labels = mylabel, cex=1.5)
text(x=0.5, y=-0.37, labels="=0.15 ns", cex=1.5)
mtext(c("lineages 3%"), side = 3, col = "black", line = 1, cex = 2)

#**END**
